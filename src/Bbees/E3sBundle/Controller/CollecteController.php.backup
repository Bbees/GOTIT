<?php

namespace Bbees\E3sBundle\Controller;

use Bbees\E3sBundle\Entity\Collecte;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * Collecte controller.
 *
 * @Route("collecte")
 */
class CollecteController extends Controller
{
    /**
     * Lists all collecte entities.
     *
     * @Route("/", name="collecte_index")
     * @Method({"GET", "POST"})
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        $collectes = $em->getRepository('BbeesE3sBundle:Collecte')->findAll();
           
        return $this->render('collecte/index.html.twig', array( 
            'collectes' => $collectes,));                

     }

    /**
     * Lists all collecte entities.
     *
     * @Route("/indexjson", name="collecte_indexjson")
     * @Method("POST")
     */
    public function indexjsonAction(Request $request)
    {
        $em = $this->getDoctrine()->getManager();

        $collectes = $em->getRepository('BbeesE3sBundle:Collecte')->findAll();
        $nb_collectes = count($collectes);
 
        $rowCount = ($request->get('rowCount')  !== NULL) ? $request->get('rowCount') : $rowCount = 10;
        $orderBy = ($request->get('sort')  !== NULL) ? $request->get('sort') : array('id' => 'asc');
        
        $minRecord = intval($request->get('current')-1)*$rowCount;
        $maxRecord = $rowCount;      
        $tab_collecte_toshow =[];
        $collectes_toshow = $em->getRepository('BbeesE3sBundle:Collecte')->findBy(array(), $orderBy , $rowCount, $minRecord);
        foreach($collectes_toshow as $collecte)
        {
            $DateCollecte = ($collecte->getDateCollecte() !== null) ?  $collecte->getDateCollecte()->format('Y-m-d') : null;
            $tab_collecte_toshow[] = array("id" => $collecte->getId(),"codeCollecte" => $collecte->getCodeCollecte(),
             "dateCollecte" => $DateCollecte,  "aFaire" => $collecte->getAfaire(),"dateCre" => $collecte->getDateCre() );
        }                

        $response = new Response ();
        $response->setContent ( json_encode ( array (
            "current"    => intval( $request->get('current') ), 
            "rowCount"  => $rowCount,            
            "rows"     => $tab_collecte_toshow, 
            "total"    => $nb_collectes // total data array				
            ) ) );
        // Si il s’agit d’un SUBMIT via une requete Ajax : renvoie le contenu au format json
        $response->headers->set('Content-Type', 'application/json');

        return $response;          
    }
    
    /**
     * Creates a new collecte entity.
     *
     * @Route("/new", name="collecte_new")
     * @Method({"GET", "POST"}) 
     */
    public function newAction(Request $request)
    {
        $collecte = new Collecte();
        $form = $this->createForm('Bbees\E3sBundle\Form\CollecteType', $collecte);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($collecte);
            $em->flush();

            return $this->redirectToRoute('collecte_show', array('id' => $collecte->getId()));
        }

        return $this->render('collecte/new.html.twig', array(
            'collecte' => $collecte,
            'form' => $form->createView(),
        ));
    }

    /**
     * Finds and displays a collecte entity.
     *
     * @Route("/{id}", name="collecte_show")
     * @Method("GET")
     */
    public function showAction(Collecte $collecte)
    {
        $deleteForm = $this->createDeleteForm($collecte);

        return $this->render('collecte/show.html.twig', array(
            'collecte' => $collecte,
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Displays a form to edit an existing collecte entity.
     *
     * @Route("/{id}/edit", name="collecte_edit")
     * @Method({"GET", "POST"})
     */
    public function editAction(Request $request, Collecte $collecte)
    {
        $deleteForm = $this->createDeleteForm($collecte);
        $editForm = $this->createForm('Bbees\E3sBundle\Form\CollecteType', $collecte);
        $editForm->handleRequest($request);

        if ($editForm->isSubmitted() && $editForm->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('collecte_edit', array('id' => $collecte->getId()));
        }

        return $this->render('collecte/edit.html.twig', array(
            'collecte' => $collecte,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));
    }

    /**
     * Deletes a collecte entity.
     *
     * @Route("/{id}", name="collecte_delete")
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Collecte $collecte)
    {
        $form = $this->createDeleteForm($collecte);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($collecte);
            $em->flush();
        }

        return $this->redirectToRoute('collecte_index');
    }

    /**
     * Creates a form to delete a collecte entity.
     *
     * @param Collecte $collecte The collecte entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Collecte $collecte)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('collecte_delete', array('id' => $collecte->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
